package com.sambre.sambre.entities.utils;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface ReviewRepository extends CrudRepository<Review, String> {

    // Trouver toutes les Ã©valuations dâ€™une entreprise
    List<Review> findByCompanyId(String companyId);

    // Trouver toutes les Ã©valuations dâ€™un candidat.
    List<Review> findByCandidateId(String candidateId);

    /**
     * RÃ©cupÃ©rer les avis dâ€™une entreprise avec une note spÃ©cifique.
     * @param companyId ID de lâ€™entreprise.
     * @param rating note (1 Ã  5).
     * @return liste des avis filtrÃ©s.
     */
    List<Review> findByCompanyIdAndRating(String companyId, int rating);

    // Trouver les avis dâ€™une entreprise crÃ©Ã©s aprÃ¨s une date donnÃ©e.
    List<Review> findByCompanyIdAndCreatedAtAfter(String companyId, LocalDateTime date);

    /**
     * ðŸ“Š Calculer la moyenne des notes dâ€™une entreprise.
     * âš  Utilise JPQL pour faire le calcul directement en base.
     * @param companyId ID de lâ€™entreprise.
     * @return moyenne des notes ou null si pas dâ€™avis.
     */
    @Query("SELECT AVG(r.rating) FROM Review r WHERE r.company.id = :companyId")
    Optional<Double> getAverageRatingByCompanyId(String companyId);

    /**
     * ðŸ”¢ Compter le nombre dâ€™avis pour une entreprise.
     * @param companyId ID de lâ€™entreprise.
     * @return nombre total dâ€™avis.
     */
    Long countByCompanyId(String companyId);
}
